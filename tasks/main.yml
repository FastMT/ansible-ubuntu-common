#####################################################################################
# Global
#####################################################################################
- name: Gathering facts if it was not done before
  setup:
  when: ansible_facts['os_family'] is not defined

#- debug:
#    msg: "{{ (ansible_mounts | selectattr('mount','equalto','/') | list | first).size_total }}"

#####################################################################################
# Resize root disk on first start for KVM VMs
#####################################################################################

- name: "Read remote file"
  slurp:
    src: /sys/devices/virtual/dmi/id/sys_vendor
  register: slurpfile
  ignore_errors: yes
  check_mode: no

- name: "Check if server is VM"
  set_fact:
    linux_virtual: "{{ slurpfile['content'] | default('') | b64decode == 'QEMU\n' }}"

- debug:
    msg: "KVM VM detected: {{ linux_virtual }}"

- name: "Resize disk for KVM VMs and if partition is less than 2Gb"
  shell: "resize2fs /dev/vda1"
  become: yes
  when: >
    linux_virtual and
    (ansible_mounts | selectattr('mount','equalto','/') | list | first).size_total < 2048*1024*1024
  ignore_errors: yes
  check_mode: no

#####################################################################################
# Set hostname
#####################################################################################
- name: "Configure hostname"
  hostname:
    name: "{{ inventory_hostname }}"
  become: yes

- name: "Add hostname into /etc/hosts"
  lineinfile:
    dest: /etc/hosts
    state: present
    line: "{{ ansible_host }} {{ inventory_hostname }}"
    regexp: "^.*[ ]{{ inventory_hostname }}"
  become: yes

#####################################################################################
# Configure SSH server
#####################################################################################

- name: "/etc/ssh/sshd_config - disable root login"
  lineinfile: dest=/etc/ssh/sshd_config state=present regexp="^[#]?PermitRootLogin[ ]" line="PermitRootLogin no"
  become: yes
  register: disable_root_login

- name: "/etc/ssh/sshd_config - disable password authentication"
  lineinfile: dest=/etc/ssh/sshd_config state=present regexp="^[#]?PasswordAuthentication[ ]" line="PasswordAuthentication no"
  become: yes
  register: disable_pw_auth

- name: "/etc/ssh/sshd_config - disable DNS resolving on connect"
  lineinfile: dest=/etc/ssh/sshd_config state=present regexp="^[#]?UseDNS[ ]" line="UseDNS no"
  become: yes
  register: disable_dns_resolve

- name: "/etc/ssh/sshd_config - disable GSSAPIAuthentication"
  lineinfile: dest=/etc/ssh/sshd_config state=present regexp="^[#]?GSSAPIAuthentication[ ]" line="GSSAPIAuthentication no"
  become: yes
  register: disable_GSSAPI

- name: "/etc/ssh/sshd_config - set custom sshd port"
  lineinfile: dest=/etc/ssh/sshd_config state=present regexp="^Port[ ]" line="Port {{ ansible_port | default(22) }}"
  become: yes
  when: ansible_port is defined 
  register: custom_port

- name: "Restart sshd if config changed"
  service: name=sshd state=restarted
  become: yes
  when: >
    disable_root_login.changed or
    disable_pw_auth.changed or
    disable_dns_resolve.changed or
    disable_GSSAPI.changed or custom_port.changed

#####################################################################################
# Configure SUDO
#####################################################################################

- name: "/etc/sudoers - do not require password for sudo"
  lineinfile: dest=/etc/sudoers state=present regexp="^\%sudo[ \t]*ALL\=\(ALL\:ALL\)" line="%sudo ALL=(ALL:ALL) NOPASSWD:ALL"
  become: yes
  when: sudo_nopasswd == true

- name: "/etc/sudoers - require password for sudo"
  lineinfile: dest=/etc/sudoers state=present regexp="^\%sudo[ \t]*ALL\=\(ALL\:ALL\)" line="%sudo ALL=(ALL:ALL) ALL"
  become: yes
  when: sudo_nopasswd == false

#####################################################################################
# Install packages
#####################################################################################
- name: "Updating repositories..."
  apt: update_cache=yes cache_valid_time=3600 force=yes
  become: yes
  changed_when: false

- name: "Install tzdata package"
  apt:
    pkg: tzdata
    state: latest
    force: yes 
  become: yes

- name: "Setting timezone..."
  timezone: "name={{ linux_timezone }}"
  become: yes

- name: "Install packages"
  apt:
    state: latest
    pkg:
     - ca-certificates
     - iptables
     - software-properties-common
     - apt-utils
     - aptitude
     - curl
     - nano
     - mc
     - iperf3
     - dstat
     - p7zip-full
     - apt-transport-https
     - iputils-ping
     - net-tools
     - traceroute
     - whois
     - dos2unix
     - mtr
     - dnsutils
     - wireguard
     - telnet
     - nload
     - unzip
     - iotop
     - netplan.io
     - python3-pip
     - jq
  become: yes

- name: "Disable IPv6"
  sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
  with_items:
     - net.ipv6.conf.all.disable_ipv6
     - net.ipv6.conf.default.disable_ipv6
     - net.ipv6.conf.lo.disable_ipv6
  when: linux_disable_ipv6
  become: yes
  ignore_errors: yes

- name: "Set Sysctl parameters"
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  with_items: "{{ linux_sysctl }}"
  become: yes
  ignore_errors: yes

- name: "Install Chrony time sync daemon"
  apt:
    state: latest
    pkg:
     - chrony
  when: linux_install_chrony
  become: yes

#####################################################################################
# Install KVM guest agent
#####################################################################################

- name: Install KVM Guest agent
  apt:
    state: latest
    pkg:
     - qemu-guest-agent
  become: yes
  when: linux_virtual 

- name: Enable KVM Guest agent
  service:
    name: qemu-guest-agent
    state: started
    enabled: true
  become: yes
  when: linux_virtual 

#####################################################################################
# Additional Loopback IP
#####################################################################################

- name: "Deploy /etc/netplan/loopback.yaml config if loopback is defined"
  copy: 
    content: |
      network:
        version: 2
        renderer: networkd
        ethernets:
          lo:
            match:
              name: lo
            addresses: [ {{ loopback_ip }}/32 ]
    dest: /etc/netplan/loopback.yaml
  become: yes
  when: loopback_ip is defined
  register: loopback_added

- name: "Remove /etc/netplan/loopback.yaml config if loopback is NOT defined"
  file:
    state: absent
    path: /etc/netplan/loopback.yaml
  become: yes
  when: loopback_ip is not defined
  register: loopback_removed

- name: "Apply netplan if required"
  command: /usr/sbin/netplan apply
  become: yes
  when: >
    loopback_added.changed or
    loopback_removed.changed
  check_mode: no
